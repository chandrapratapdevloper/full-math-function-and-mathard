// this library makes your calculation code simple because, here is alot of function for calculation like 
sum ,subsctract, multiply, divide,factor,power,fibonacci,string reverse,squre,,derivative,intrigerls ...

#ifndef MATH_LIBRARY_H
#define MATH_LIBRARY_H

#include <cmath>
#include <algorithm>
#include <stdexcept>
#include <string>

class MathLibrary {
public:
    // Arithmetic operations
    static double add(double a, double b) {
        return a + b;
    }

    static double subtract(double a, double b) {
        return a - b;
    }

    static double multiply(double a, double b) {
        return a * b;
    }

    static double divide(double a, double b) {
        if (b == 0) {
            throw std::invalid_argument("Division by zero");
        }
        return a / b;
    }

    // Ceiling and floor
    static double ceil(double a) {
        return std::ceil(a);
    }

    static double floor(double a) {
        return std::floor(a);
    }

    // Maximum and minimum
    static double maximum(double a, double b) {
        return std::max(a, b);
    }

    static double minimum(double a, double b) {
        return std::min(a, b);
    }

    // Power and square
    static double power(double base, double exp) {
        return std::pow(base, exp);
    }

    static double square(double a) {
        return multiply(a, a);
    }

    // Factorial
    static unsigned long long factorial(int n) {
        if (n < 0) {
            throw std::invalid_argument("Factorial of negative number is undefined");
        }
        unsigned long long result = 1;
        for (int i = 1; i <= n; ++i) {
            result *= i;
        }
        return result;
    }

    // Fibonacci
    static unsigned long long fibonacci(int n) {
        if (n < 0) {
            throw std::invalid_argument("Fibonacci of negative number is undefined");
        }
        if (n == 0) return 0;
        if (n == 1) return 1;

        unsigned long long a = 0, b = 1, c;
        for (int i = 2; i <= n; ++i) {
            c = a + b;
            a = b;
            b = c;
        }
        return b;
    }

    // String reversal
    static std::string reverseString(const std::string& str) {
        return std::string(str.rbegin(), str.rend());
    }

    // Power m to n
    static double powerMToN(double m, double n) {
        return std::pow(m, n);
    }

    // Derivative (approximation)
    static double derivative(double (*func)(double), double x, double h = 1e-5) {
        return (func(x + h) - func(x - h)) / (2 * h);
    }

    // Integral (approximation using the trapezoidal rule)
    static double integral(double (*func)(double), double a, double b, int n = 1000) {
        double step = (b - a) / n;
        double area = 0.5 * (func(a) + func(b));
        for (int i = 1; i < n; ++i) {
            area += func(a + i * step);
        }
        return area * step;
    }
};

#endif // MATH_LIBRARY_H
